#!/usr/bin/env node
'use strict';

const SlackBot = require('slackbots');
const readline = require('readline');
const fs = require('fs');
const path = require('path');
const parseArgs = require('minimist');

const config = require('./config');

let args = parseArgs(process.argv.slice(2));

let botName = args.bot;
let channel = args.channel;

let botConfig = null;
if (botName) {
    try {
        botConfig = require(`${config.bots_path}/${botName}`);
    } catch(err) {
        console.error(`No config file found for bot ${botName}.`);
        process.exit(1);
    }

    if (!botConfig) {
        console.error(`Failed to load config file for bot ${botName}.`);
        process.exit(1);
    }

    if (!botConfig.name) {
        console.error('Bot config missing required \'name\' attribute!'); 
        process.exit(1);
    }
}

let bot = new SlackBot({
    token: config.token,
    name: botConfig && botConfig.name
});

let rl = readline.createInterface(process.stdin, process.stdout);

function updatePrompt() {
    let _botName = (botName || 'none');
    let _channel = (channel || 'none');
    rl.setPrompt(`${_botName} [${_channel}]> `);
}

function printHelp() {
    console.log('All commands below must be preceded by a !\n');
    console.log('help:                              Print this dialog');
    console.log('get [users|channels]:              Print a list of users, channels, and groups you can send messages to');
    console.log('get bots:                          Print a list of available bots configured in your bots directory');
    console.log('set channel <user or channel>:     Send messages to <user or channel>');
    console.log('set bot <botname>:                 Send messages as bot <botname>');
    console.log('quit:                              Exit the slackbots terminal');
    console.log('\n');
    rl.prompt();
}

updatePrompt();

rl.on('line', line => {
    if (!line) {
        rl.prompt();
    } else {
        if (line.startsWith('!')) {
            // special commands
            var _line = line.substr(1).split(' ');
            if (_line.length > 0 && (_line[0] === 'quit' || _line[0] === 'exit')) {
                rl.close();
            } else if (_line.length > 0 && (_line[0] === 'set' || _line[0] === 'use')) {
                if (_line.length > 1 && _line[1] === 'channel') {
                    if (_line.length > 2) {
                        channel = _line[2];
                        updatePrompt();
                        console.log(`Sending messages to ${channel}.`);
                        rl.prompt();
                    }
                } else if (_line.length > 1 && _line[1] === 'bot') {
                    if (_line.length > 2) {
                        let tryBotName = _line[2];
                        try {
                            botConfig = require(`${config.bots_path}/${tryBotName}`);
                            bot = new SlackBot({
                                token: config.token,
                                name: botConfig.name
                            });
                            botName = tryBotName;
                            updatePrompt();
                            console.log(`Sending messages as ${botName}.`);
                        } catch(err) {
                            console.log(`Bot '${tryBotName}' not found.`);
                        }
                        rl.prompt();
                    }
                } else {
                    printHelp();
                }
            } else if (_line.length > 0 && (_line[0] === 'get' || _line[0] === 'list' || _line[0] === 'show')) {
                if (_line.length > 1 && _line[1] === 'bots') {
                    fs.readdir(`${config.bots_path}`, (err, files) => {
                        if (err) {
                            console.error(err);
                        } else {
                            console.log('\nAvailable bots:\n');

                            files.filter(f => !f.startsWith('_') && f.endsWith('.json')).forEach(file => {
                                let b = path.basename(file, '.json');
                                let active = b === botName;
                                console.log(b + (active ? ' (*)' : ''));
                            });

                            console.log('\n(*) = current bot');
                            console.log('\nUse `!set bot <botname>` to change bot.\n');

                            rl.prompt(); // async callback so we have to do this again
                        }
                    });
                } else if (_line.length > 1 && _line[1] === 'channels') {
                    Promise.all([bot.getChannels(), bot.getGroups()])
                        .then(data => {
                            let channels = data[0].channels;
                            let groups = data[1].groups;

                            console.log('\nAvailable channels and groups:\n');

                            channels.forEach(c => {
                                let active = c.name === channel;
                                console.log(c.name + (active ? ' (*)' : ''));
                            });

                            groups.filter(g => g['is_open'] && !g['is_mpim']).forEach(g => {
                                let active = g.name === channel;
                                console.log(g.name + (active ? ' (*)' : ''));
                            });

                            console.log('\n(*) = current channel');
                            console.log('\nTo view a list of users, use `!get users`.');
                            console.log('\nUse `!set channel <channel>` to change channel.\n');

                            rl.prompt();
                        });
                } else if (_line.length > 1 && _line[1] === 'users') {
                    bot.getUsers().then(data => {
                        let users = data.members;
                        console.log('\nAvailable users:\n');

                        users.filter(u => !u['is_deleted'] && !u['is_bot']).forEach(u => {
                            let active = u.name === channel;
                            console.log(u.name + (active ? ' (*)' : ''));
                        });

                        console.log('\n(*) = current channel');
                        console.log('\nTo view a list of channels and groups, use `!get channels`.');
                        console.log('\nUse `!set channel <user>` to change channel.\n');

                        rl.prompt();
                    });
                } else {
                    printHelp();
                }
            } else { 
                printHelp();
            }
        } else {
            if (botConfig && channel) {
                bot.postTo(channel, line, botConfig);
            } else {
                if (!botConfig) {
                    console.log('\nYou must select a bot to send messages as!');
                    console.log('\nUse `!get bots` to retrieve a list of available bots.');
                    console.log('\nUse `!set bot <botname>` to select a bot.');
                    console.log('');
                } else if (!channel) {
                    console.log('\nYou must select a channel to send to!');
                    console.log('\nUse `!get channels` to retrieve a list of channels.');
                    console.log('\nUse `!set channel <channel>` to change channel.');
                    console.log('');
                }
            }
            rl.prompt();
        }
    }
}).on('close', () => process.exit(0));

bot.on('start', () => {
    if (botName) {
        console.log(`${botName} is online!`);
    }
    rl.prompt();
});

